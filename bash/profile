#!/bin/bash
# Custom bash profile

export NAME="Frank Navarro"
export TERM=xterm-256color
export LANG=en_US.UTF-8
export VISUAL=nvim
export EDITOR="$VISUAL"

function _dir_chomp () {
	local IFS=/ path_index=1 current_dir
	local path=(${1/#$HOME/\~}) r_path=${path[*]}
	local path_len=${#r_path}
	while ((path_len > $2 && path_index < ${#path[*]}-1))
	do
		current_dir=${path[path_index]}
		path[path_index++]=${current_dir:0:2}
	done
	echo "${path[*]}"
}


function echo_nonempty() {
  if [[ ! -z "$1" ]]; then
    echo "$1"
  fi
}

alias dd="docker-compose down --remove-orphans"
alias dup="docker-compose up -d"
alias dlog="docker logs -f"
alias drm="docker container rm"
function di() {
  docker image ls | grep $1
}
function dls() {
  # fuzzy search without namespace in the name
  # e.g. wiretest_ibanking_1 will not search wiretest
  # this case will be covered in full_name_search

  NO_HEADERS=0
  SHOW_ALL=0
  FIELDS=""
  for arg in "$@"; do
    case $arg in
      --no-headers)
        NO_HEADERS=1
        shift
      ;;
      -a|--all)
        SHOW_ALL=1
        shift
      ;;
      -f*|--format*)
        FIELDS=$(echo "$arg" | sed -e 's/^[^= ]*[= ]\?//g')
        shift
        if [[ -z "$FIELDS" ]]; then
          FIELDS="$1"
          shift
        fi
      ;;
    esac
  done

  IFS=, read -r -a fields <<< "$FIELDS"
  docker_format=""
  for field in "${fields[@]}"; do
    lowercase_field="${field,,}"
    formatted_field="${lowercase_field^}"
    case $formatted_field in
      Id) formatted_field="ID" ;;
      Createdat) formatted_field="CreatedAt" ;;
      Runningfor) formatted_field="RunningFor" ;;
    esac
    docker_format+="{{.$formatted_field}}\t"
  done

  containers=""
  if [[ "$SHOW_ALL" -eq 1 ]]; then
    if [[ -z "$docker_format" ]]; then
      containers=$(docker container ls -a)
    else
      containers=$(docker container ls -a --format "table $docker_format{{.Names}}")
    fi
  else
    if [[ -z "$docker_format" ]]; then
      containers=$(docker container ls)
    else
      containers=$(docker container ls --format "table $docker_format{{.Names}}")
    fi
  fi

  headers=""
  if [[ "$NO_HEADERS" -eq 0 ]]; then
    headers=$(echo "$containers" | awk 'NR==1 {print}')
  fi

  fuzzy_search_results=$(echo "$containers" | tail -n+2 | awk '$NF ~ /.*'"$1"'.*/ {print}' )
  fuzzy_search_count=$(wc -w <<< $fuzzy_search_results)

  full_name_search_result=$(echo "$containers" | tail -n+2 | awk -v n=$1 '$NF == $n {print}' )
  full_name_search_count=$(wc -w <<< $full_name_search_result)

  if [ $fuzzy_search_count -ge 1 ]; then
    echo_nonempty "$headers"
    echo "$fuzzy_search_results"
  else
    if [ $full_name_search_count -eq "1" ]; then
      echo_nonempty "$headers"
      echo "$full_name_search_result"
    else
      echo_nonempty "$headers"
    fi
  fi

}
function dfi() {
  search_results=$(dls --no-headers $1 | awk '{print $NF}')
  search_results_count=$(wc -w <<< "$search_results")

  if [ $search_results_count -eq "1" ]; then
    docker exec -it $search_results bash
  elif [ $search_results_count -eq "0" ]; then
    echo " ** Cannot find any container with that name"
  else
    echo " ** Multiple conntainers are found with that name"
    echo "################################"
    echo "$search_results"
    echo "################################"
    echo " ** Please use the unique key word in the name"
    echo " ** Or use the full name from the list above"
  fi
}
function filesize() {
  check_dir="."
  if [[ ! -z "$1" ]]; then
    check_dir="$1"
  fi

  dir_sizes=$(du -h -d 1 "$check_dir" | sort -nr)
  IFS=, read -r -a units <<< "Y,Z,E,P,T,G,M,K"
  sorted_dirs=""

  for unit in "${units[@]}"; do
    sorted_dirs+=$(echo "$dir_sizes" | awk '$1 ~ /'"$unit"'$/ {print}' )
  done
  echo "$sorted_dirs"
}

function _format_ps1 () {
	if [[ "$TERM" =~ 256color ]]; then
		local green=28
		local yellow=226
		local orange=178
		local black=16
		local white=255

		local color1="$green"
		local text_color_1="$white"
		local color2="$yellow"
		local text_color_2="$black"
		local color3="$orange"
		local text_color_3="$black"
		export PS1="\\033[38;5;${text_color_1};48;5;${color1}m \u \e[38;5;${color1};48;5;${color2}m\e[38;5;${text_color_2}m \h \e[38;5;${color2};48;5;${color3}m\e[38;5;${text_color_3}m $(_dir_chomp "$(pwd)" 20) \e[m\e[38;5;${color3}m \e[m"
  else
		export PS1="\e[42m \u \e[32;43m\e[m\e[43m \h \e[33;44m\e[m\e[44m $(_dir_chomp "$(pwd)" 20) \e[0;34m \e[m"
	fi
}

_format_ps1

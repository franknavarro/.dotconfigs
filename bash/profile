#!/bin/bash
# Custom bash profile

export NAME="Frank Navarro"
export TERM=xterm-256color
export LANG=en_US.UTF-8
export VISUAL=nvim
export EDITOR="$VISUAL"



function echo_nonempty() {
  if [[ ! -z "$1" ]]; then
    echo "$1"
  fi
}

alias dd="docker-compose down --remove-orphans"
alias dup="docker-compose up -d"
alias dlog="docker logs -f"
alias drm="docker container rm"
function di() {
  docker image ls | grep $1
}
function dls() {
  # fuzzy search without namespace in the name
  # e.g. wiretest_ibanking_1 will not search wiretest
  # this case will be covered in full_name_search

  NO_HEADERS=0
  SHOW_ALL=0
  FIELDS=""
  for arg in "$@"; do
    case $arg in
      --no-headers)
        NO_HEADERS=1
        shift
      ;;
      -a|--all)
        SHOW_ALL=1
        shift
      ;;
      -f*|--format*)
        FIELDS=$(echo "$arg" | sed -e 's/^[^= ]*[= ]\?//g')
        shift
        if [[ -z "$FIELDS" ]]; then
          FIELDS="$1"
          shift
        fi
      ;;
    esac
  done

  IFS=, read -r -a fields <<< "$FIELDS"
  docker_format=""
  for field in "${fields[@]}"; do
    lowercase_field="${field,,}"
    formatted_field="${lowercase_field^}"
    case $formatted_field in
      Id) formatted_field="ID" ;;
      Createdat) formatted_field="CreatedAt" ;;
      Runningfor) formatted_field="RunningFor" ;;
    esac
    docker_format+="{{.$formatted_field}}\t"
  done

  containers=""
  if [[ "$SHOW_ALL" -eq 1 ]]; then
    if [[ -z "$docker_format" ]]; then
      containers=$(docker container ls -a)
    else
      containers=$(docker container ls -a --format "table $docker_format{{.Names}}")
    fi
  else
    if [[ -z "$docker_format" ]]; then
      containers=$(docker container ls)
    else
      containers=$(docker container ls --format "table $docker_format{{.Names}}")
    fi
  fi

  headers=""
  if [[ "$NO_HEADERS" -eq 0 ]]; then
    headers=$(echo "$containers" | awk 'NR==1 {print}')
  fi

  fuzzy_search_results=$(echo "$containers" | tail -n+2 | awk '$NF ~ /.*'"$1"'.*/ {print}' )
  fuzzy_search_count=$(wc -w <<< $fuzzy_search_results)

  full_name_search_result=$(echo "$containers" | tail -n+2 | awk -v n=$1 '$NF == $n {print}' )
  full_name_search_count=$(wc -w <<< $full_name_search_result)

  if [ $fuzzy_search_count -ge 1 ]; then
    echo_nonempty "$headers"
    echo "$fuzzy_search_results"
  else
    if [ $full_name_search_count -eq "1" ]; then
      echo_nonempty "$headers"
      echo "$full_name_search_result"
    else
      echo_nonempty "$headers"
    fi
  fi

}
function dfi() {
  search_results=$(dls --no-headers $1 | awk '{print $NF}')
  search_results_count=$(wc -w <<< "$search_results")

  if [ $search_results_count -eq "1" ]; then
    docker exec -it $search_results bash
  elif [ $search_results_count -eq "0" ]; then
    echo " ** Cannot find any container with that name"
  else
    echo " ** Multiple conntainers are found with that name"
    echo "################################"
    echo "$search_results"
    echo "################################"
    echo " ** Please use the unique key word in the name"
    echo " ** Or use the full name from the list above"
  fi
}
function filesize() {
  check_dir="."
  if [[ ! -z "$1" ]]; then
    check_dir="$1"
  fi

  dir_sizes=$(du -h -d 1 "$check_dir" | sort -nr)
  IFS=, read -r -a units <<< "Y,Z,E,P,T,G,M,K"
  sorted_dirs=""

  for unit in "${units[@]}"; do
    sorted_dirs+=$(echo "$dir_sizes" | awk '$1 ~ /'"$unit"'$/ {print}' )
  done
  echo "$sorted_dirs"
}

function _set_ps1() {
  local EXIT="$?"

  local green=28
  local blue=51
  local yellow=226
  local red=160
  local orange=178
  local darkergrey=233
  local darkgrey=237
  local black=16
  local white=255

  local home_color="$blue"
  local home_text="$black"
  local dir_color="$darkgrey"
  local dir_text="$white"

  local dolor_color="$green"
  if [ $EXIT != 0 ]; then
    dolor_color="$red"
  fi
  local dolor_text="$white"

  function _format_pwd () {
    local IFS=/ path_index=0 current_dir
    local path=(${1/#$HOME/\~}) r_path=${path[*]}
    local path_len=${#r_path}
    local home=""
    local path_str=""
    if [[ "${path[0]}" = "~" ]]; then
      home="\e[38;5;${home_text};48;5;${home_color}m ~ "
    fi
    path=("${path[@]:1}")
    while ((path_index < ${#path[*]}))
    do
      current_dir=${path[path_index]}
      local deliminator=" "
      if [ $path_index -eq 0 ]; then
        deliminator=" "
      fi
      if [ $path_len -gt $2 ] && (( $path_index < ${#path[*]}-1 )); then
        path_str="${path_str}${deliminator}${current_dir:0:2} "
      else
        path_str="${path_str}${deliminator}${current_dir} "
      fi
      ((path_index++))
    done
    local home_deliminator=""
    if [ -n "$home" ]; then
      local home_delim_color="$dir_color"
      if [ $path_index -eq 0 ]; then
        home_delim_color="$dolor_color"
      fi
      home_deliminator="\e[38;5;${home_color};48;5;${home_delim_color}m"
    fi
    if [ $path_index -eq 0 ] && [ -n "$home" ]; then
      echo "${home}${home_deliminator}"
    else
      if [ $path_index -eq 0 ]; then
        path_str=" / "
      fi
      echo "${home}${home_deliminator}\e[38;5;${dir_text};48;5;${dir_color}m${path_str}\e[m\e[38;5;${dir_color};48;5;${dolor_color}m"
    fi
  }

  PS1="$(_format_pwd "$(pwd)" 20)\e[38;5;${dolor_text}m \\$ \e[m\e[38;5;${dolor_color}m\e[m"
}

PROMPT_COMMAND=_set_ps1
